import { clusterApiUrl, Connection, Keypair, PublicKey, sendAndConfirmTransaction } from "@solana/web3.js";
import { exit } from "process";
import { createSwapTransaction } from "./client";
import { getConnection, getDeploymentConfig, getOrCreateAssociatedAccountInfo, getPoolConfig, readKeypair } from "./utils";
import { Command } from "commander";

// these are mocked USDC and USDT mint for testnet
const mockedUSDCMint = new PublicKey("3itb8x9GX7bxQ6eFfQT3E7CstkjaESizBpHNWB5wxjYY");
const mockedUSDTMint = new PublicKey("Hi4jco598zF6g4VM3uYfDaTvZFoMtX6TaTZZ9QdiVLUq");
// this are real USDC and USDT mint for mainnet
const realUSDCMint = new PublicKey("EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v");
const realUSDTMint = new PublicKey("Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB");

// mocked USDC and USDT token account of the wallet from the keypair
// const exampleUSDCTokenAccount = new PublicKey("J9ZWtE2vrSvEqLYsW3yEzAGSMvw2tFiVBNteQ6e565zy");
// const exampleUSDTTokenAccount = new PublicKey("G5JJmV4qAtEE2dDJABn4iZ2W4RhdNM3xCDHw5SP1pafK");

// the example transaction logic
// this function established 2 transaction, first sell USDC for USDT and second sell USDT for USDC
// because we have to wallet keypair in code base, we just sign the transaction generated by the API
// directly with the wallet keypair
// in actually application, we should use wallet sdk for the signature
const runExample = async (keypairFilePath: string, exampleDeployment: string) => {
  if (exampleDeployment !== "testnet" && exampleDeployment !== "mainnet-prod") {
    console.error("wrong deployment mode!");
    exit(1);
  }

  const deployConfig = getDeploymentConfig(exampleDeployment);
  const poolConfig = getPoolConfig(deployConfig, "USDC-USDT");
  console.info(poolConfig);

  const usdcMint = new PublicKey(poolConfig.mintBase);
  const usdtMint = new PublicKey(poolConfig.mintQuote);

  const keyPair = readKeypair(keypairFilePath);
  const connection = new Connection(clusterApiUrl(deployConfig.network), "confirmed");

  // get USDC/USDT token account from the wallet
  const usdcTokenAccount = (
    await getOrCreateAssociatedAccountInfo(
      connection,
      keyPair,
      usdcMint,
      keyPair.publicKey,
    )
  ).address;
  const usdtTokenAccount = (
    await getOrCreateAssociatedAccountInfo(
      connection,
      keyPair,
      usdtMint,
      keyPair.publicKey,
    )
  ).address;

  // example transaction 1: sell USDC for USDT
  console.info("transaction 1: sell 1 USDC for USDT");
  const { transaction: transactionUSDCforUSDT, userTransferAuthority: tmpAuthorityA } =
    await createSwapTransaction(
      keyPair.publicKey,
      connection,
      usdcMint,
      usdtMint,
      usdcTokenAccount,
      usdtTokenAccount,
      "1",
      "0.9",
      exampleDeployment,
    );

  try {
    // may use wallet sdk for signature in application
    const signature = await sendAndConfirmTransaction(connection, transactionUSDCforUSDT, [
      tmpAuthorityA,
      keyPair,
    ]);
    console.info("transaction USDC -> USDT succeeded with signature: " + signature);
  } catch (e) {
    console.error("transaction USDC -> USDT failed with error: " + e);
    exit(1);
  }

  // example transaction 2: sell USDT for USDC
  console.info("transaction 2: sell 1 USDT for USDC");
  const { transaction: transactionUSDTforUSDC, userTransferAuthority: tmpAuthorityB } =
    await createSwapTransaction(
      keyPair.publicKey,
      connection,
      usdtMint,
      usdcMint,
      usdtTokenAccount,
      usdcTokenAccount,
      "1",
      "0.9",
      exampleDeployment,
    );

  try {
    // may use wallet sdk for signature in application
    const signature = await sendAndConfirmTransaction(connection, transactionUSDTforUSDC, [
      tmpAuthorityB,
      keyPair,
    ]);
    console.info("transaction USDT -> USDC succeeded with signature: " + signature);
  } catch (e) {
    console.error("transaction USDT -> USDC failed with error: " + e);
    exit(1);
  }
};

const main = () => {
  const program = new Command();
  program
    .command("run")
    .option("-k --keypair <wallet keypair for example transactions>")
    .option("-d --deployment <deployment mode of deltafi contract>")
    .action(async (option) => {
      runExample(option.keypair, option.deployment);
    });

  program.parse(process.argv);
};

// run the example transaction logic
// exampleTransactions();
main();
